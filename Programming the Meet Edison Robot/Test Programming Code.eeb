<xml xmlns="http://www.w3.org/1999/xhtml">
  <block type="new_event_start" id="vPEah;f,5Vq@@LR1BgJI" deletable="false" movable="false" x="18" y="148">
    <next>
      <block type="light_sound_LED" id=".i@aePCp|JR1]A,[^:kL">
        <value name="CHOICE">
          <shadow type="dropdown_light_sound_LED" id="/%ojCH?E,Q#R-@8Xx[=F">
            <field name="CHOICE">bothOn</field>
          </shadow>
        </value>
        <next>
          <block type="light_sound_beep" id="*z(mbU:Bs1q!ReH9hm[?">
            <next>
              <block type="drive_forwards_time" id="]^1uV}o9X)jdfdL[Gyd}">
                <value name="DURATION">
                  <shadow type="math_positive_number" id="H;xC;:HYw.t-KTn#aSx]">
                    <field name="NUM">1</field>
                  </shadow>
                </value>
                <next>
                  <block type="light_sound_LED" id="+.Qg@)aE_5@]RtJFfr^2">
                    <value name="CHOICE">
                      <shadow type="dropdown_light_sound_LED" id="Axu2WD{fHwyEjA~L{cc5">
                        <field name="CHOICE">bothOff</field>
                      </shadow>
                    </value>
                    <next>
                      <block type="drive_stop" id="{l+e6W!A]]{ke1|,ArXd"></block>
                    </next>
                  </block>
                </next>
              </block>
            </next>
          </block>
        </next>
      </block>
    </next>
  </block>
</xml>